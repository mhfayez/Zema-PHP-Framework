<?php
/**
 * Author: Mohammad Homayoon Fayez
 * Date: 01-05-2017
 * Article controller
 **/
//use \DirectoryIterator;
class Controller extends Tagger
{
    private $id = 'id';
    private $title = 'title';
    // htmlized anchor tags array of menu items
    protected $menuList;
    //array of raw menu items
    private $menuItems;
    private $menuItem;
    private $partialsDir = '../app/views/partials/';
    private $filenames = [];
    private $attribute;
    private $outerTag;
    private $tag;
    protected $user;

    protected function __construct($id, $title)
    {
        $this->id = $id;
        $this->title = $title;
    }

    /**
     * meodel Method : returns an instance of a model
     * @param $model
     * @return mixed
     */
    protected function model($model)
    {
        require_once '../app/models/'.$model.'.php';
        
        return new $model();
    }

    /**
     * Enables the partials on  the view of the controller that calls this method
     * the partials must exist in the partial folder
     * @param $partial
     */
    protected function partial($partial)
    {
        if(is_array($partial)){
            foreach ($partial as $p) {
                if(strpos($p, '/')!==false ) {
                    $name = explode('/', $p);
                    $this->setPartial($name[1], $this->partialsDir . $p . '.html');
                } else {
                    $this->setPartial($p, $this->partialsDir  . $p . '.html');
                }
            }
        } else {
            if(strpos($partial, '/')!==false ) {
                $name = explode('/', $partial);
                $this->setPartial($name[1], $this->partialsDir . $partial . '.html');
            }else {
                $this->setPartial($partial, $this->partialsDir . $partial . '.html');
            }
        }


    }

    /**
     * Renders a  view for the controller that calls this method
     * @param $view
     */
    protected function view($view)
    {
        $this->renderView('../app/views/' . $view . '.html');
    }

    /**
     * Hides the tag/tags in a template of the controller that calls this  method
     * @param $tag
     */
    protected function hide($tag)
    {
        if(is_array($tag)){
            foreach ($tag as $item) {
                $this->hideTag($item);
            }
        } else {
            $this->hideTag($tag);
        }
    }

    /**
     * makeMenu Method : uses createMenu to create menus with <a href> tags
     * if $needle is passed then it will put attributes only on those menu items given in $needle array
     * @param array $list
     * @param $htmlTag
     * @param string $attributes
     * @param array $needle
     * @return $this
     */
    protected function make($list, $htmlTag = 'a', $attributes = ' href = "#" ', array $needle = [])
    {
        $this->menuItems = $list;
       // $this->tag = $this->makeHtmlTag('');
       // $this->outerTag = $this->makeHtmlTag('');
        $this->createList($htmlTag, $attributes, $needle);
        return $this;
    }

    /**
     * addTag Method: adds tag i.e wraps each item of the menuList generated by makeMenu method
     * in the tags passed to this method e.g <li> menu-item </li>
     * @param $tags
     * @param array $list : if provided, will use this list instead of the menuList to add tags to
     * @param string $data : if provided, will add this data to each menu item e.g. an asterisk( * )
     * @return $this
     */
    protected function addTag($tags, $list = [], $data=''){
        $this->menuList = $list ? $list : $this->menuList;
        $this->tag = $this->makeHtmlTag($tags);
            foreach ($this->menuList as $key => $menu) {
                $this->menuList[$key] =
                    $this->tag['start'] .
                    $data.' '.$menu .
                    $this->tag['end'];
            }
        return  $this;

    }

    /**
     * Method addAttribute adds attributes to the html anchor
     * @param $attribute
     * @param array $needle
     * @return mixed
     */
    protected function addAttribute($attribute, array $needle = [])
    {
       $this->createList($attribute, $needle);
        return  $this->menuList;
    }

    /**
     * createMenu Method : create menu with <a href> tags and sets attributes if provided e.g class="someClass"
     * if needle is provided then it will set attribute only on those items
     * @param string $htmlTag
     * @param string $attribute
     * @param array $needle
     * @internal param $href
     */
    private function createList($htmlTag = 'a', $attribute = '', array $needle = []){
        $this->attribute = $attribute;
        if(is_array($this->menuItems)) {
            foreach ($this->menuItems as $menuItem) {
                if($htmlTag === 'a') {
                    $id = '/'.$menuItem[$this->id];
                }else {
                    $id = ' menu_id = '. $menuItem[$this->id];
                }
                if($needle) {
                    if (!in_array(trim($menuItem[$this->title]), $needle)) {
                        var_dump($menuItem[$this->title]);
                        $this->attribute = '';
                    } else {
                        $this->attribute = $attribute;
                    }
                }
                $this->menuList[$menuItem[$this->id]] =
                    $this->outerTag['start'] . $this->tag['start'] .
                    '<'.$htmlTag . ' '. $this->attribute . $id . '>' . $menuItem[$this->title] . '</' .$htmlTag.'>' .
                    $this->tag['end'] . $this->outerTag['end'];
            }
        }
    }

    /**
     * getCurrentState method : returns the current state of the object
     * @return $this
     */
    public function getCurrentState(){
        return $this;
    }

    /**
     * getIds method: returns an array of the ids of existing items in menuList
     * @return array
     */
    public function getIds()
    {
        $ids = [];
        foreach ($this->menuList as $key => $value) {
            array_push($ids, $key);
        }
        return $ids;
    }

    /**
     * exists method: checks if the resource is ready to be served
     * @param $resource
     * @return bool
     */
    public function exists($resource)
    {
        foreach ($resource as $item) {
            if(!in_array($item, $this->getIds())) {
               return false;
            }
        }
        return true;
    }

    /**
     * add Method : adds extra elements e.g. edit/delete buttons to all the menu items created by the makeMenu method
     * if needle is provided then adds buttons/elements only to those specific menu-items
     * @param $elements
     * @param $tag
     * @param string $outerTag
     * @param array $needle
     * @return mixed
     */
    protected function add(array $elements, $tag = false, $outerTag = false, array $needle = [])
    {
        $tag = $tag == false ? '' : $tag;
        $tag = $this->makeHtmlTag($tag);

        $outerTag = $this->makeHtmlTag($outerTag);

        if($needle){
            $list = $this->grepMatch($needle, $this->menuList);
        }else{
            $list = $this->menuList;
        }
        foreach ($list as $key => $menuItem) {
                foreach ($elements as $element) {
                    $element = $tag['start'] . $element . $tag['end'];
                    $menuItem .= str_replace('$id', $key, $element);
                }
            $this->menuList[$key] = $outerTag['start'] . $menuItem . $outerTag['end'] ;
        }
        return $this;
    }

    /**
     * todo: should be removed
     * makeMainMenu Method : creates main menu <a href> tags from the list provided
     * expects that the list array has path and menu keys
     * Needs to be refactored
     * @param array $list
     * @param string $attribute
     * @param string $tag
     * @return array
     */
    public function makeMainMenu($list, $attribute='', $tag = '')
    {
        $menuList = [];
        $tag = $this->makeHtmlTag($tag);
        if(is_array($list)) {
            foreach ($list as $menu) {
                $menuList[count($menuList)] =
                    $tag['start'] .
                    ' <a ' . $attribute . ' href =' . ZEMA_ROOT . $menu['path'] . '>' . $menu['menu'] . '</a> ' .
                    $tag['end'];
            }
        }

        return $menuList;
    }

    /**
     * Wannabe method: Sets whatever globally
     * @param string $model
     * @param string $tag
     * @param string $htmlAttribute
     */
    public function setGlobals()
    {
        if (isset($_SESSION['status']) && $_SESSION['status'] == 'loggedin') {
            $this->setTag(TAGS['user'], $_SESSION['user_name']);
            $this->setTag(TAGS['user_status'], 'Logout');
            $this->setTag(TAGS['auth_path'],'logout');
        } else {
            $this->setTag(TAGS['user_status'],'Login');
            $this->setTag(TAGS['auth_path'],'login');
            $this->setTag(TAGS['user'],'Guest');
        }
    }

    /**
     * redirect Method : redirects to the provided uri
     * @param $uri
     */
    protected function redirect($uri){
        header("Location: ".ZEMA_ROOT."/".$uri);
    }

    /**
     * get Method : returns the list of the menu items. can be called from any stage of the menu assembly line
     * @return mixed
     */
    protected function get(){
        return $this->menuList;
    }

    /**
     * Private stringify helper method. Converts an indexed array into a string
     * where each element is separated  by  a white space
     * @param $data
     * @return string
     */
    protected function stringify($data)
    {
        $str = '';
        foreach ($data as $datum) {
            $str .= $datum . ' ';
        }
        return $str;
    }

    /**
     * Finds the elements matched by the pattern, behaves like %like% in DB search queries
     * @param $needle
     * @param $haystack
     * @return array
     */
    private function grepMatch($needle, $haystack)
    {
        $list = [];
            foreach ($needle as $item) {
                $res = preg_grep('~' . preg_quote($item, '~'). '~', $haystack);
                foreach ($res as $key => $value) {
                    array_push($list, $value);
                }
            }
        return $list;
    }


    /**
     * getFileList Method returns a list of file names without extention also from sub directories
     * @param $dir
     * @return array
     */
    private function getFileList($dir)
    {
        // add trailing slash if missing
        if(substr($dir, -1) != "/") $dir .= "/";
        // open directory for reading
        $d = new DirectoryIterator($dir) or die("getFileList: Failed opening directory $dir for reading");
        foreach($d as $fileinfo) {
            if($fileinfo->isDot()) continue;
            if($fileinfo->isDir()){
                $this->getFileList($dir."{$fileinfo}");
                continue;
            }
            if(!in_array("{$fileinfo}", $this->filenames)) {
                $file = explode(".", "{$fileinfo}");
                $this->filenames[] = $file[0];
            }
        }

        return $this->filenames;
    }

    protected function getContents($path)
    {
        $content = file_get_contents($this->partialsDir . $path . '.html');
        return $this->replaceTag('zema_root', ZEMA_ROOT, $content);
    }

    /**
     * isOwner Method: Checks if the current logged in user is the owner or the resource
     * @param $resource_id
     * @return bool
     */
    protected function isOwner($resource_id)
    {
        if(in_array($resource_id, array_keys($this->menuList))) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * init Method : initializes teh environment by removing all the _PARTIAL tags from the views, setting the root dir
     * setting the globals etc.
     */
    public function init(){
        $this->hide($this->getFileList($this->partialsDir));
        $this->setRootDir();
        $this->setGlobals();
        $this->user = $this->model('User');
    }

    public function error($msq)
    {
        exit($this->create());
    }
}